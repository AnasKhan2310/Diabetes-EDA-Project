# -*- coding: utf-8 -*-
"""Diabetes_EDA_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H2yoNfVwlIbUnvr2T900JGg3YMQhTjcu
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

# Load the dataset
df = pd.read_csv("diabetes.csv")
df

df.columns

# Dataset shape and info
print("Dataset contains", df.shape[0], "rows and", df.shape[1], "columns")
df.info()
df.describe()

# Replace 0 with NaN in certain columns
cols_with_invalid_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[cols_with_invalid_zero] = df[cols_with_invalid_zero].replace(0, np.nan)

# Check missing values
df.isnull().sum

df[cols_with_invalid_zero]

df.isnull().sum()

df.info()

cols_with_invalid_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
cols_with_invalid_zero

# Fill missing values with median
for col in cols_with_invalid_zero:
    df[col].fillna(df[col].median(), inplace=True)

# Countplot of target variable
sns.countplot(x='Outcome', data=df)
plt.title("Count of Diabetes Outcomes")
plt.xticks([0, 1], ['No Diabetes', 'Diabetes'])
plt.show()

# Age distribution
plt.figure(figsize=(8,5))
sns.histplot(df['Age'], bins=30, kde=True)
plt.title("Age Distribution of Patients")
plt.xlabel("Age")
plt.show()

# BMI distribution
plt.figure(figsize=(8,5))
sns.histplot(df['BMI'], bins=30, kde=True)
plt.title("BMI Distribution")
plt.xlabel("BMI")
plt.show()

# Glucose vs Outcome
plt.figure(figsize=(8,5))
sns.boxplot(x='Outcome', y='Glucose', data=df)
plt.title("Glucose Level vs Diabetes Outcome")
plt.xticks([0, 1], ['No Diabetes', 'Diabetes'])
plt.show()

# Blood Pressure vs Outcome
plt.figure(figsize=(8,5))
sns.boxplot(x='Outcome', y='BloodPressure', data=df)
plt.title("Blood Pressure vs Diabetes Outcome")
plt.show()

# Age vs Outcome
plt.figure(figsize=(8,5))
sns.boxplot(x='Outcome', y='Age', data=df)
plt.title("Age vs Diabetes Outcome")
plt.show()

# Correlation matrix
corr = df.corr()
plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")

corr = df.corr()
corr

"""## âœ… Summary of Insights

- Dataset shows **class imbalance**.
- Diabetic individuals tend to have **higher Glucose, BMI, and Age**.
- **Invalid zeros** needed to be handled in several features.
- **Correlation heatmap** highlights important features for predictive modeling.

You can now move forward to predictive modeling using Logistic Regression, Decision Trees, or any classifier of your choice.

"""